{
  "consumer": {
    "name": "NestJSConsumer"
  },
  "interactions": [
    {
      "description": "a request for data",
      "providerState": "the producer has data",
      "request": {
        "method": "GET",
        "path": "/api/data"
      },
      "response": {
        "body": {
          "id": 1,
          "name": "Sample Data"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "status": 200
      }
    },
    {
      "description": "a request for order details by user ID",
      "providerState": "user with ID 1 has orders",
      "request": {
        "headers": {
          "Accept": "application/json"
        },
        "method": "GET",
        "path": "/api/users/1/orders"
      },
      "response": {
        "body": {
          "email": "johndoe@example.com",
          "name": "John Doe",
          "orders": [
            {
              "date": "2023-10-10",
              "items": [
                {
                  "name": "Product A",
                  "price": 50.25,
                  "productId": "A1",
                  "quantity": 2
                },
                {
                  "name": "Product B",
                  "price": 50,
                  "productId": "B2",
                  "quantity": 1
                }
              ],
              "orderId": 101,
              "total": 150.5
            }
          ],
          "userId": 1
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "matchingRules": {
          "$.body.email": {
            "match": "type"
          },
          "$.body.name": {
            "match": "type"
          },
          "$.body.orders[0].date": {
            "match": "type"
          },
          "$.body.orders[0].items[0].name": {
            "match": "type"
          },
          "$.body.orders[0].items[0].price": {
            "match": "type"
          },
          "$.body.orders[0].items[0].productId": {
            "match": "type"
          },
          "$.body.orders[0].items[0].quantity": {
            "match": "type"
          },
          "$.body.orders[0].items[1].name": {
            "match": "type"
          },
          "$.body.orders[0].items[1].price": {
            "match": "type"
          },
          "$.body.orders[0].items[1].productId": {
            "match": "type"
          },
          "$.body.orders[0].items[1].quantity": {
            "match": "type"
          },
          "$.body.orders[0].orderId": {
            "match": "type"
          },
          "$.body.orders[0].total": {
            "match": "type"
          },
          "$.body.userId": {
            "match": "type"
          }
        },
        "status": 200
      }
    },
    {
      "description": "a request for user details by ID",
      "providerState": "user with ID 1 exists",
      "request": {
        "method": "GET",
        "path": "/api/users/1"
      },
      "response": {
        "body": {
          "email": "johndoe@example.com",
          "id": 1,
          "name": "John Doe"
        },
        "headers": {
          "Content-Type": "application/json"
        },
        "status": 200
      }
    }
  ],
  "metadata": {
    "pact-js": {
      "version": "13.1.4"
    },
    "pactRust": {
      "ffi": "0.4.22",
      "models": "1.2.3"
    },
    "pactSpecification": {
      "version": "2.0.0"
    },
    "performanceExpectations": {
      "responseTimes": {
        "p50": "200ms",
        "p90": "300ms",
        "p99": "500ms",
        "max": "1000ms"
      },
      "allowedErrorRate": "0.5%",
      "trafficPatterns": {
        "regularLoad": {
          "requestsPerSecond": "50",
          "hoursOfOperation": "24/7"
        },
        "peakLoad": {
          "requestsPerSecond": "200",
          "expectedPeakHours": ["08:00-12:00", "18:00-21:00"]
        },
        "specialPeriods": {
          "requestsPerSecond": "300",
          "description": "Annual promotional event",
          "duration": "3 days"
        }
      }
    },
    "scalabilityExpectations": {
      "expectedScaleFactor": "3x",
      "maxConcurrentRequests": "1000",
      "dependencies": [
        "Database connection pool size must be scalable to handle peak load",
        "Cache size and eviction policy to be optimized for high concurrency"
      ]
    },
    "resiliencyExpectations": {
      "retryPolicy": {
        "maxRetries": 3,
        "backoffStrategy": "exponential",
        "maxBackoffTime": "5s"
      },
      "circuitBreaker": {
        "failureThreshold": "10%",
        "resetTimeout": "60s"
      },
      "failover": {
        "description": "Fallback mechanism in case of producer unavailability",
        "target": "Cache or secondary provider service"
      }
    },
    "notes": {
      "description": "This Pact contract includes expectations for performance, scalability, and resiliency under varying load conditions.",
      "lastUpdated": "2024-10-11"
    }
  },
  "provider": {
    "name": "SpringBootProducer"
  }
}
